name: CI

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - "**"

jobs:
  tests:
    runs-on: ${{ matrix.operating-system }}
    
    strategy:
      matrix:
        php-version: ['7.4']
        operating-system: [ubuntu-latest]
        dependencies:
          - lowest
          - locked
          - highest
          
    name: PHP ${{ matrix.php-version }}, ${{ matrix.dependencies }}, ${{ matrix.operating-system }}
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        
      - name: "Setup PHP, composer and extensions"
        uses: shivammathur/setup-php@v1
        with:
          php-version: ${{ matrix.php-version }}
          extensions: json, mbstring
          coverage: pcov

      - name: Validate composer.json and composer.lock
        run: composer validate
        
      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      
      - name: "Cache dependencies installed with composer"
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
        
      - name: "Install lowest dependencies with composer"
        if: matrix.dependencies == 'lowest'
        run: composer update --no-ansi --no-interaction --no-progress --no-suggest --optimize-autoloader --prefer-lowest
        
      - name: "Install locked dependencies with composer"
        if: matrix.dependencies == 'locked'
        run: composer install --no-ansi --no-interaction --no-progress --no-suggest --prefer-dist --optimize-autoloader

      - name: "Install highest dependencies with composer"
        if: matrix.dependencies == 'highest'
        run: composer update --no-ansi --no-interaction --no-progress --no-suggest --optimize-autoloader
        
      - name: Run test suite
        run: composer run-script test

      - name: "Collect code coverage with Xdebug and phpunit/phpunit"
        run: vendor/bin/phpunit --coverage-clover=coverage.xml

      - name: "Send code coverage report to Codecov.io"
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash) || true
      
      - name: "Push subpackage changes"
        run: |
          git remote add -f Functional git@github.com:Deji69/Encase-Functional.git
          git remote add -f Matching git@github.com:Deji69/Encase-Matching.git
          git subtree push --prefix=src/Encase/Functional Functional master
          git subtree push --prefix=src/Encase/Matching Matching master
